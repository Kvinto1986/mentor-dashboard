{"version":3,"sources":["components/table.jsx","App.js","serviceWorker.js","index.js"],"names":["taskArr","mentorsDashboard","splice","Table","_ref","selectedOption","getColorTd","keyId","color","react_default","a","createElement","key","style","backgroundColor","taskArrObj","mentorStudents","studentsTasksArr","headArr","map","elem","value","mentorGitName","mentorTh","href","mentorGitLink","target","rel","label","push","students","studentTh","studentName","studentGit","mentorName","i","length","taskTdArr","taskTd","task","taskLink","j","status","studentTasks","includes","textAlign","className","options","App","state","handleChange","_this","setState","this","react_select_esm","onChange","table","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44e2f6ed.chunk.js","sourcesContent":["import React from 'react';\nimport mentorsDashboard from \"../xlsx-to-json module/mentorsDashboard\"\n\nconst taskArr = mentorsDashboard.splice(0, 1);\n\nconst Table = ({selectedOption}) => {\n\n    if (selectedOption!==null) {\n        const taskArrObj = taskArr[0];\n        let mentorStudents = \" \";\n        const studentsTasksArr = [];\n        const headArr = [];\n\n        mentorsDashboard.map(function (elem) {\n            if (selectedOption.value === elem.mentorGitName) {\n                mentorStudents = elem;\n            }\n        });\n\n        const mentorTh = <th key={mentorStudents.mentorGitName}><a href={mentorStudents.mentorGitLink}\n                                                                   target=\"_blank\"\n                                                                   rel=\"noopener noreferrer\">Mentor: {selectedOption.label}</a>\n        </th>;\n\n        headArr.push(mentorTh);\n\n        mentorStudents.students.map(function (elem) {\n            const studentTh = <th key={elem.studentName}><a href={elem.studentGit}\n                                                            target=\"_blank\" rel=\"noopener noreferrer\">{elem.studentName}\n            </a></th>;\n            headArr.push(studentTh);\n        });\n\n\n        studentsTasksArr.push(<tr key={mentorStudents.mentorName}>{headArr}</tr>);\n\n        function getColorTd(keyId, color) {\n            return <td key={keyId} style={{backgroundColor: color}}></td>;\n        }\n\n        for (let i = 0; i < taskArrObj.length; i++) {\n\n            const taskTdArr = [];\n\n            const taskTd = <td key={taskArrObj[i].task}><a href={taskArrObj[i].taskLink}\n                                                           target=\"_blank\"\n                                                           rel=\"noopener noreferrer\">{taskArrObj[i].task}</a></td>;\n\n            taskTdArr.push(taskTd);\n\n            for (let j = 0; j < mentorStudents.students.length; j++) {\n                let taskTd;\n                const key = mentorStudents.students[j].studentName + taskArrObj[i].status;\n\n                if (taskArrObj[i].status === \"In Progress\") {\n                    taskTd = getColorTd(key, \"gold\")\n                }\n                if (taskArrObj[i].status === \"Checking\" && !mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n                    taskTd = getColorTd(key, \"lightcoral\")\n                }\n\n                if (mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n                    taskTd = getColorTd(key, \"green\")\n                }\n\n                if (taskArrObj[i].status === \"Checked\" && !mentorStudents.students[j].studentTasks.includes(taskArrObj[i].task)) {\n                    taskTd = getColorTd(key, \"maroon\")\n                }\n\n                if (taskArrObj[i].status === \"ToDo\") {\n                    taskTd = getColorTd(key, \"grey\")\n                }\n\n                taskTdArr.push(taskTd);\n            }\n\n            studentsTasksArr.push(<tr key={taskArrObj[i].task}>{taskTdArr}</tr>);\n\n\n        }\n\n        studentsTasksArr.push(<tr key=\"Legend\"><h3 style={{textAlign: 'center'}}>Legend</h3></tr>);\n        studentsTasksArr.push(<tr key=\"gold\">\n            <td style={{backgroundColor: 'gold'}}></td>\n            <td> - students working on that task now</td>\n        </tr>);\n        studentsTasksArr.push(<tr key=\"lightcoral\">\n            <td style={{backgroundColor: 'lightcoral'}}></td>\n            <td> - need to check</td>\n        </tr>);\n        studentsTasksArr.push(<tr key=\"green\">\n            <td style={{backgroundColor: 'green'}}></td>\n            <td> - checked by mentor</td>\n        </tr>);\n        studentsTasksArr.push(<tr key=\"maroon\">\n            <td style={{backgroundColor: 'maroon'}}></td>\n            <td> - time to checking is gone and no mark from mentor</td>\n        </tr>);\n        studentsTasksArr.push(<tr key=\"grey\">\n            <td style={{backgroundColor: 'grey'}}></td>\n            <td> - task in todo state</td>\n        </tr>);\n\n        return <table\n            className=\"tableDashboard\">\n            <tbody key=\"studentsTasks\">{studentsTasksArr}</tbody>\n        </table>\n    }\n    else return null\n};\n\nexport default Table\n","import React from 'react';\nimport Select from 'react-select';\nimport './components/style.css';\nimport mentorsDashboard from \"./xlsx-to-json module/mentorsDashboard\"\nimport Table from './components/table';\n\nconst options = mentorsDashboard.map(function (elem) {\n    const objElem = {\n        value: elem.mentorGitName, label: elem.mentorGitName + ' (' + elem.mentorName + ')'\n    };\n    return objElem\n\n});\n\nclass App extends React.Component {\n    state = {\n        selectedOption: null\n    };\n\n    handleChange = (selectedOption) => {\n\n        this.setState({selectedOption});\n\n    };\n\n    render() {\n        const {selectedOption} = this.state;\n\n        return (\n            <div className=\"mainContainer\">\n                <h1>Enter your GitHub login</h1>\n                <Select\n                    className=\"select\"\n                    value={selectedOption}\n                    onChange={this.handleChange}\n                    options={options}\n                />\n                <Table\n                    selectedOption={selectedOption}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}